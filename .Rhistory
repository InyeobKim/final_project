# obtain predicted and residual values using model2 above
new_tab$predicted <- predict(model2)
new_tab$residuals <- residuals(model2)
# plotting residual
new_tab %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point(size = 2, color = "orange") +
geom_hline(yintercept = 0, color = "deepskyblue3", type = "dashed")
# select our data of interest
new_tab <- std_tab %>%
select(gpa, study_hour, sleep_hour)
# obtain predicted and residual values using model2 above
new_tab$predicted <- predict(model2)
new_tab$residuals <- residuals(model2)
# plotting residual
new_tab %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point(size = 2, color = "orange") +
geom_hline(yintercept = 0, color = "deepskyblue3", type = "dashed") +
scale_x_continuous(breaks = seq(-3, 3, 0.5)) +
scale_y_continuous(breaks = seq(-3, 3, 0.5))
# select our data of interest
new_tab <- std_tab %>%
select(gpa, study_hour, sleep_hour)
# obtain predicted and residual values using model2 above
new_tab$predicted <- predict(model2)
new_tab$residuals <- residuals(model2)
# plotting residual
new_tab %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point(size = 2, color = "orange") +
geom_hline(yintercept = 0, color = "deepskyblue3", type = "dashed") +
scale_x_continuous(breaks = seq(-3, 3, 0.5)) +
scale_y_continuous(breaks = seq(-3, 3, 0.5))
model2.stdres <- rstandard(model2)
qqnorm(model2.stdresm
ylab = "Residuals",
# select our data of interest
new_tab <- std_tab %>%
select(gpa, study_hour, sleep_hour)
# obtain predicted and residual values using model2 above
new_tab$predicted <- predict(model2)
new_tab$residuals <- residuals(model2)
# plotting residual
new_tab %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point(size = 2, color = "orange") +
geom_hline(yintercept = 0, color = "deepskyblue3", type = "dashed") +
scale_x_continuous(breaks = seq(-3, 3, 0.5)) +
scale_y_continuous(breaks = seq(-3, 3, 0.5))
model2.stdres <- rstandard(model2)
qqnorm(model2.stdresm,
ylab = "Residuals",
xlab = "Normal scores")
# select our data of interest
new_tab <- std_tab %>%
select(gpa, study_hour, sleep_hour)
# obtain predicted and residual values using model2 above
new_tab$predicted <- predict(model2)
new_tab$residuals <- residuals(model2)
# plotting residual
new_tab %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point(size = 2, color = "orange") +
geom_hline(yintercept = 0, color = "deepskyblue3", type = "dashed") +
scale_x_continuous(breaks = seq(-3, 3, 0.5)) +
scale_y_continuous(breaks = seq(-3, 3, 0.5))
model2.stdres <- rstandard(model2)
qqnorm(model2.stdres,
ylab = "Residuals",
xlab = "Normal scores")
qqline(model2.stdres)
library(tidyverse)
library(tidyr)
tab <- read.csv("./gpa_dat.csv")
sum(is.na(tab))
tidy_tab <- tab %>%
# filtering gpa less than 4.0
filter(gpa <= 4.0) %>%
# dropping unnecessary columns
select(-time_stamp,  -email) %>%
# making two dummy variables for resource_type using fastDummies package
fastDummies::dummy_cols(remove_first_dummy = TRUE) %>%
select(-resource_type)
names(tidy_tab)[6] <- "r1"
names(tidy_tab)[7] <- "r2"
# Could not find the better way to standardize attributes
std_tab <- tidy_tab %>%
mutate(mean_study_hour = mean(study_hour)) %>%
mutate(sd_study_hour = sd(study_hour)) %>%
mutate(mean_freq_TA = mean(freq_TA)) %>%
mutate(sd_freq_TA = sd(freq_TA)) %>%
mutate(mean_sleep_hour = mean(sleep_hour)) %>%
mutate(sd_sleep_hour = sd(sleep_hour)) %>%
mutate(mean_gpa = mean(gpa)) %>%
mutate(sd_gpa = sd(gpa)) %>%
mutate(std_study_hour = (study_hour - mean_study_hour) / sd_study_hour) %>%
mutate(std_freq_TA = (freq_TA - mean_freq_TA) / sd_freq_TA) %>%
mutate(std_sleep_hour = (sleep_hour - mean_sleep_hour) / sd_sleep_hour) %>%
mutate(std_gpa = (gpa - mean_gpa) / sd_gpa) %>%
select(std_gpa, std_study_hour, r1, r2, std_freq_TA, std_sleep_hour, relationship)
names(std_tab)[1] <- "gpa"
names(std_tab)[2] <- "study_hour"
names(std_tab)[5] <- "freq_TA"
names(std_tab)[6] <- "sleep_hour"
library("PerformanceAnalytics")
chart.Correlation(std_tab, histogram = TRUE)
mat <- cor(std_tab)
mat
model1 <- lm(gpa ~ study_hour + r1 + r2 + freq_TA + sleep_hour + relationship, data = std_tab)
summary(model1)
mat <- cor(std_tab)
mat
model1 <- lm(gpa ~ study_hour + r1 + r2 + freq_TA + sleep_hour + relationship, data = std_tab)
summary(model1)
test <- lm(gpa ~ r1 + r2 + freq_TA + relationship, data = std_tab)
summary(test)
model2 <- lm(gpa ~ study_hour + sleep_hour, data = std_tab)
anova(model2, model1)
# select our data of interest
new_tab <- std_tab %>%
select(gpa, study_hour, sleep_hour)
# obtain predicted and residual values using model2 above
new_tab$predicted <- predict(model2)
new_tab$residuals <- residuals(model2)
# plotting residual
new_tab %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point(size = 2, color = "orange") +
geom_hline(yintercept = 0, color = "deepskyblue3", type = "dashed") +
scale_x_continuous(breaks = seq(-3, 3, 0.5)) +
scale_y_continuous(breaks = seq(-3, 3, 0.5))
model2.stdres <- rstandard(model2)
qqnorm(model2.stdres,
ylab = "Residuals",
xlab = "Normal scores")
qqline(model2.stdres)
library(tidyverse)
library(tidyr)
tab <- read.csv("./gpa_dat.csv")
# Could not find the better way to standardize attributes
std_tab <- tidy_tab %>%
mutate(mean_study_hour = mean(study_hour)) %>%
mutate(sd_study_hour = sd(study_hour)) %>%
mutate(mean_freq_TA = mean(freq_TA)) %>%
mutate(sd_freq_TA = sd(freq_TA)) %>%
mutate(mean_sleep_hour = mean(sleep_hour)) %>%
mutate(sd_sleep_hour = sd(sleep_hour)) %>%
mutate(mean_gpa = mean(gpa)) %>%
mutate(sd_gpa = sd(gpa)) %>%
mutate(std_study_hour = (study_hour - mean_study_hour) / sd_study_hour) %>%
mutate(std_freq_TA = (freq_TA - mean_freq_TA) / sd_freq_TA) %>%
mutate(std_sleep_hour = (sleep_hour - mean_sleep_hour) / sd_sleep_hour) %>%
mutate(std_gpa = (gpa - mean_gpa) / sd_gpa) %>%
select(std_gpa, std_study_hour, r1, r2, std_freq_TA, std_sleep_hour, relationship)
names(std_tab)[1] <- "gpa"
names(std_tab)[2] <- "study_hour"
names(std_tab)[5] <- "freq_TA"
names(std_tab)[6] <- "sleep_hour"
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point()+
geom_line()
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point()
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_histogram()
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_bar(stat = "identity")
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point()
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point() +
geom_smooth(method = lm)
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm)
View(new_tab)
View(tidy_tab)
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm)
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
which(tidy_tab$sleep_hour >= 7 && tidy_tab$gpa <= 2.0)
which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
unnessary_rows <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
unnessary_rows <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
unnessary_rows
unnessary_rows <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
unnessary_rows[1]
unnessary_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
unnessary_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
unnessary_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
unnessary_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
new_tidy_tab <- tidy_tab[-unnecessary_rows1]
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
new_tidy_tab <- tidy_tab[-useless_rows1]
View(new_tidy_tab)
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
new_tidy_tab <- tidy_tab[-useless_rows1]
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
useless_rows1
useless_rows2
new_tidy_tab <- tidy_tab[-useless_rows1]
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
useless_rows1
useless_rows2
new_tidy_tab <- tidy_tab[-c(5,6,11,27,35,36,37,46)]
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
useless_rows1
useless_rows2
new_tidy_tab <- tidy_tab[-useless_rows1,]
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.0)
useless_rows1
useless_rows2
new_tidy_tab <- tidy_tab[-useless_rows1,]
new_tidy_tab <- new_tidy_tab[-useless_rows2,]
# checking the plot again
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
# checking the plot again
new_tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
new_tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
sum(is.na(tab))
tidy_tab <- tab %>%
# filtering gpa less than 4.0
filter(gpa <= 4.0) %>%
# dropping unnecessary columns
select(-time_stamp,  -email) %>%
# making two dummy variables for resource_type using fastDummies package
fastDummies::dummy_cols(remove_first_dummy = TRUE) %>%
select(-resource_type)
names(tidy_tab)[6] <- "r1"
names(tidy_tab)[7] <- "r2"
tidy_tab <- tab %>%
# filtering gpa less than 4.0
filter(gpa <= 4.0) %>%
# dropping unnecessary columns
select(-time_stamp,  -email) %>%
# making two dummy variables for resource_type using fastDummies package
fastDummies::dummy_cols(remove_first_dummy = TRUE) %>%
select(-resource_type)
names(tidy_tab)[6] <- "r1"
names(tidy_tab)[7] <- "r2"
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
# removing weird values
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 7 & tidy_tab$gpa <= 2.5)
new_tidy_tab <- tidy_tab[-useless_rows1,]
new_tidy_tab <- new_tidy_tab[-useless_rows2,]
# checking the plot again
new_tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
new_tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
tidy_tab <- tab %>%
# filtering gpa less than 4.0
filter(gpa <= 4.0) %>%
# dropping unnecessary columns
select(-time_stamp,  -email) %>%
# making two dummy variables for resource_type using fastDummies package
fastDummies::dummy_cols(remove_first_dummy = TRUE) %>%
select(-resource_type)
names(tidy_tab)[6] <- "r1"
names(tidy_tab)[7] <- "r2"
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
# removing weird values
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 6.5 & tidy_tab$gpa <= 2.5)
new_tidy_tab <- tidy_tab[-useless_rows1,]
new_tidy_tab <- new_tidy_tab[-useless_rows2,]
# checking the plot again
new_tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
new_tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
tidy_tab <- tab %>%
# filtering gpa less than 4.0
filter(gpa <= 4.0) %>%
# dropping unnecessary columns
select(-time_stamp,  -email) %>%
# making two dummy variables for resource_type using fastDummies package
fastDummies::dummy_cols(remove_first_dummy = TRUE) %>%
select(-resource_type)
names(tidy_tab)[6] <- "r1"
names(tidy_tab)[7] <- "r2"
tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
# removing weird values
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 6.5 & tidy_tab$gpa <= 2.5)
usless_rows <- union(useless_rows1, useless_rows2)
new_tidy_tab <- tidy_tab[-useless_rows,]
# removing weird values
useless_rows1 <- which(tidy_tab$study_hour >= 4 & tidy_tab$gpa <= 2.0)
useless_rows2 <- which(tidy_tab$sleep_hour >= 6.5 & tidy_tab$gpa <= 2.5)
useless_rows <- union(useless_rows1, useless_rows2)
new_tidy_tab <- tidy_tab[-useless_rows,]
# checking the plot again
new_tidy_tab %>%
ggplot(aes(x=study_hour, y=gpa)) +
geom_point(color = "orange") +
geom_smooth(method = lm) +
labs(title = "GPA by study hour",
x = "Study hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 2))
new_tidy_tab %>%
ggplot(aes(x=sleep_hour, y=gpa)) +
geom_point(color = "deepskyblue3") +
geom_smooth(method = lm) +
labs(title = "GPA by sleep hoour",
x = "Sleep hour",
y = "GPA") +
scale_x_continuous(breaks = seq(0, 10, 1))
# Could not find the better way to standardize attributes
std_tab <- new_tidy_tab %>%
mutate(mean_study_hour = mean(study_hour)) %>%
mutate(sd_study_hour = sd(study_hour)) %>%
mutate(mean_freq_TA = mean(freq_TA)) %>%
mutate(sd_freq_TA = sd(freq_TA)) %>%
mutate(mean_sleep_hour = mean(sleep_hour)) %>%
mutate(sd_sleep_hour = sd(sleep_hour)) %>%
mutate(mean_gpa = mean(gpa)) %>%
mutate(sd_gpa = sd(gpa)) %>%
mutate(std_study_hour = (study_hour - mean_study_hour) / sd_study_hour) %>%
mutate(std_freq_TA = (freq_TA - mean_freq_TA) / sd_freq_TA) %>%
mutate(std_sleep_hour = (sleep_hour - mean_sleep_hour) / sd_sleep_hour) %>%
mutate(std_gpa = (gpa - mean_gpa) / sd_gpa) %>%
select(std_gpa, std_study_hour, r1, r2, std_freq_TA, std_sleep_hour, relationship)
names(std_tab)[1] <- "gpa"
names(std_tab)[2] <- "study_hour"
names(std_tab)[5] <- "freq_TA"
names(std_tab)[6] <- "sleep_hour"
library("PerformanceAnalytics")
chart.Correlation(std_tab, histogram = TRUE)
mat <- cor(std_tab)
mat
mat <- cor(std_tab)
mat
model1 <- lm(gpa ~ study_hour + r1 + r2 + freq_TA + sleep_hour + relationship, data = std_tab)
summary(model1)
test <- lm(gpa ~ r1 + r2 + freq_TA + relationship, data = std_tab)
summary(test)
model2 <- lm(gpa ~ study_hour + sleep_hour, data = std_tab)
anova(model2, model1)
# select our data of interest
new_tab <- std_tab %>%
select(gpa, study_hour, sleep_hour)
# obtain predicted and residual values using model2 above
new_tab$predicted <- predict(model2)
new_tab$residuals <- residuals(model2)
# plotting residual
new_tab %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point(size = 2, color = "orange") +
geom_hline(yintercept = 0, color = "deepskyblue3", type = "dashed") +
scale_x_continuous(breaks = seq(-3, 3, 0.5)) +
scale_y_continuous(breaks = seq(-3, 3, 0.5))
model2.stdres <- rstandard(model2)
qqnorm(model2.stdres,
ylab = "Residuals",
xlab = "Normal scores")
qqline(model2.stdres)
